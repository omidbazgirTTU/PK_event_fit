TECHNICAL NOTES: Neural Event ODE Fitting for Pharmacokinetic Models
=======================================================================

Project Overview:
- Implementing Neural ODEs to fit pharmacokinetic (PK) data with piecewise dosing events
- Two-compartment PK model with dosing at specific time points
- JAX/Diffrax implementation for neural ODE training

Repository Structure:
/src/
  /simulate/
    - 2C_simulator.py: Generates synthetic 2-compartment PK data for 100 patients
  /fit/
    /jax_workflow/
      - full_solution_o1.py: Neural ODE training with piecewise integration
    /pytorch_workflow/
      - (PyTorch implementation files)
  /control/
    - pkpd_optim.py: Dose optimization
    - pkpd_simulator.py: PKPD simulation with tumor dynamics

Key Technical Components:

1. Data Generation (2C_simulator.py):
   - Samples 100 patient parameter sets from multivariate log-normal distribution
   - Parameters: CL (clearance), V1 (central volume), Q (inter-compartmental clearance), V2 (peripheral volume)
   - Dose schedule: 100mg at t=[12, 24, 36] hours, final time 48 hours
   - Outputs: pk_dataset.npz with shape (100, 4, 200, 2) representing:
     * 100 patients
     * 4 segments (3 dosing intervals + final segment)
     * 200 time points per segment
     * 2 compartments (central, peripheral)

2. Neural ODE Implementation (full_solution_o1.py):
   - MLP architecture: [2, 32, 32, 2] (2 compartments → 32 → 32 → 2 derivatives)
   - Scaled time integration: Each segment mapped to [0,1] for numerical stability
   - Piecewise integration using JAX scan for efficient batch processing
   - Loss function: MSE between predicted and true concentration profiles
   - Optimizer: Adam with learning rate 1e-3

3. Key Technical Challenges Addressed:
   - Handling discontinuous dosing events in neural ODEs
   - Time scaling for numerical stability across different segment lengths
   - Efficient batched training across multiple patients
   - Piecewise integration maintaining state continuity with dose additions

4. Mathematical Framework:
   - Two-compartment ODE system:
     dC1/dt = -k10*C1 - k12*C1 + k21*C2
     dC2/dt = k12*C1 - k21*C2
   - Neural network learns f(C1, C2) → (dC1/dt, dC2/dt)
   - Dosing events: C1 := C1 + dose_amount at specified times

Environment Setup:
- Python virtual environment with JAX ecosystem
- Key dependencies: jax, jaxlib, diffrax, optax, numpy, matplotlib
- Training: 2000 iterations with loss monitoring every 200 steps

Current Status:
- Data generation pipeline complete
- Neural ODE training framework implemented
- Ready for training and validation on 100-patient dataset
- Blog post structure created for technical documentation

Next Steps:
- Run training on full dataset
- Compare JAX vs PyTorch implementations
- Analyze convergence and fit quality
- Document results in technical blog post

File Outputs:
- pk_dataset.npz: Training data (100 patients, piecewise PK profiles)
- Trained neural ODE parameters
- Visualization plots comparing true vs predicted concentrations
